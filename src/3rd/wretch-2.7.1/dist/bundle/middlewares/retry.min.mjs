const e=(e,r)=>e*r,r=e=>e&&e.ok,t=({delayTimer:t=500,delayRamp:o=e,maxAttempts:n=10,until:s=r,onRetry:l=null,retryOnNetworkError:i=0,resolveWithLatestResponse:u=0,skip:m}={})=>e=>(r,c)=>{let p=0;if(m&&m(r,c))return e(r,c);const a=(m,h)=>Promise.resolve(s(m,h)).then((s=>s?m&&u?m:h?Promise.reject(h):m:(p++,!n||p<=n?new Promise((n=>{const s=o(t,p);setTimeout((()=>{"function"==typeof l?Promise.resolve(l({response:m,error:h,url:r,options:c})).then(((t={})=>{var o,s;n(e(null!==(o=t&&t.url)&&void 0!==o?o:r,null!==(s=t&&t.options)&&void 0!==s?s:c))})):n(e(r,c))}),s)})).then(a).catch((e=>{if(!i)throw e;return a(null,e)})):m&&u?m:Promise.reject(h||new Error("Number of attempts exceeded.")))));return e(r,c).then(a).catch((e=>{if(!i)throw e;return a(null,e)}))};export{t as retry};
//# sourceMappingURL=retry.min.mjs.map
