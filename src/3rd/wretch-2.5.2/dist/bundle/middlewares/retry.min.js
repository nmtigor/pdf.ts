var global, factory;
global = this,
  factory = function (e) {
    const t = (e, t) => e * t, o = (e) => e && e.ok;
    e.retry = (
      {
        delayTimer: e = 500,
        delayRamp: r = t,
        maxAttempts: n = 10,
        until: l = o,
        onRetry: i = null,
        retryOnNetworkError: s = 0,
        resolveWithLatestResponse: a = 0,
        skip: f,
      } = {},
    ) =>
    (t) =>
    (o, c) => {
      let u = 0;
      if (f && f(o, c)) return t(o, c);
      const d = (f, p) =>
        Promise.resolve(l(f, p)).then((l) =>
          l
            ? f && a ? f : p ? Promise.reject(p) : f
            : (u++,
              !n || u <= n
                ? new Promise((n) => {
                  const l = r(e, u);
                  setTimeout(() => {
                    "function" == typeof i
                      ? Promise.resolve(
                        i({ response: f, error: p, url: o, options: c }),
                      ).then((e = {}) => {
                        var r, l;
                        n(t(
                          null !== (r = e && e.url) && void 0 !== r ? r : o,
                          null !== (l = e && e.options) && void 0 !== l ? l : c,
                        ));
                      })
                      : n(t(o, c));
                  }, l);
                }).then(d).catch((e) => {
                  if (!s) throw e;
                  return d(null, e);
                })
                : f && a
                ? f
                : Promise.reject(
                  p || new Error("Number of attempts exceeded."),
                ))
        );
      return t(o, c).then(d).catch((e) => {
        if (!s) {
          throw e;
        }
        return d(null, e);
      });
    };
  },
  "object" == typeof exports && "undefined" != typeof module
    ? factory(exports)
    : "function" == typeof define && define.amd
    ? define(["exports"], factory)
    : factory(
      (global = "undefined" != typeof globalThis ? globalThis : global || self)
        .wretchRetryMiddleware = {},
    );
//# sourceMappingURL=retry.min.js.map
