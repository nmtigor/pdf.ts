{"version":3,"file":"wretch.min.cjs","sources":["../../src/constants.ts","../../src/utils.ts","../../src/config.ts","../../src/resolver.ts","../../src/middleware.ts","../../src/core.ts","../../src/index.ts"],"sourcesContent":["export const JSON_MIME = \"application/json\"\nexport const CONTENT_TYPE_HEADER = \"Content-Type\"\nexport const FETCH_ERROR = Symbol()","import { CONTENT_TYPE_HEADER } from \"./constants.js\"\n\nexport function extractContentType(headers: HeadersInit = {}): string | undefined {\n  return Object.entries(headers).find(([k]) =>\n    k.toLowerCase() === CONTENT_TYPE_HEADER.toLowerCase()\n  )?.[1]\n}\n\nexport function isLikelyJsonMime(value: string): boolean {\n  return /^application\\/.*json.*/.test(value)\n}\n\nexport const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n  return Object.entries(two).reduce((acc, [key, newValue]) => {\n    const value = one[key]\n    if (Array.isArray(value) && Array.isArray(newValue)) {\n      acc[key] = mergeArrays ? [...value, ...newValue] : newValue\n    } else if (typeof value === \"object\" && typeof newValue === \"object\") {\n      acc[key] = mix(value, newValue, mergeArrays)\n    } else {\n      acc[key] = newValue\n    }\n\n    return acc\n  }, { ...one })\n}\n","import { mix } from \"./utils.js\"\nimport type { Config } from \"./types.js\"\n\ndeclare const global\n\nconst config: Config = {\n  // Default options\n  options: {},\n  // Error type\n  errorType: \"text\",\n  // Polyfills\n  polyfills: {\n    // fetch: null,\n    // FormData: null,\n    // URLSearchParams: null,\n    // performance: null,\n    // PerformanceObserver: null,\n    // AbortController: null\n  },\n  polyfill(p: string, doThrow: boolean = true, instance: boolean = false, ...args: any[]) {\n    const res = this.polyfills[p] ||\n      (typeof self !== \"undefined\" ? self[p] : null) ||\n      (typeof global !== \"undefined\" ? global[p] : null)\n    if (doThrow && !res) throw new Error(p + \" is not defined\")\n    return instance && res ? new res(...args) : res\n  }\n}\n\n/**\n * Sets the default fetch options that will be stored internally when instantiating wretch objects.\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.options({ headers: { \"Accept\": \"application/json\" } });\n *\n * // The fetch request is sent with both headers.\n * wretch(\"...\", { headers: { \"X-Custom\": \"Header\" } }).get().res();\n * ```\n *\n * @param options Default options\n * @param replace If true, completely replaces the existing options instead of mixing in\n */\nexport function setOptions(options: object, replace = false) {\n  config.options = replace ? options : mix(config.options, options)\n}\n\n/**\n * Sets the default polyfills that will be stored internally when instantiating wretch objects.\n * Useful for browserless environments like `node.js`.\n *\n * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.polyfills({\n *   fetch: require(\"node-fetch\"),\n *   FormData: require(\"form-data\"),\n *   URLSearchParams: require(\"url\").URLSearchParams,\n * });\n *\n * // Uses the above polyfills.\n * wretch(\"...\").get().res();\n * ```\n *\n * @param polyfills An object containing the polyfills\n * @param replace If true, replaces the current polyfills instead of mixing in\n */\nexport function setPolyfills(polyfills: object, replace = false) {\n  config.polyfills = replace ? polyfills : mix(config.polyfills, polyfills)\n}\n\n/**\n * Sets the default method (text, json, â€¦) used to parse the data contained in the response body in case of an HTTP error.\n * As with other static methods, it will affect wretch instances created after calling this function.\n *\n * _Note: if the response Content-Type header is set to \"application/json\", the body will be parsed as json regardless of the errorType._\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.errorType(\"json\")\n *\n * wretch(\"http://server/which/returns/an/error/with/a/json/body\")\n *   .get()\n *   .res()\n *   .catch(error => {\n *     // error[errorType] (here, json) contains the parsed body\n *     console.log(error.json)\n *   })\n * ```\n *\n * If null, defaults to \"text\".\n */\nexport function setErrorType(errorType: string) {\n  config.errorType = errorType\n}\n\nexport default config\n","import { middlewareHelper } from \"./middleware.js\"\nimport { mix } from \"./utils.js\"\nimport type { Wretch, WretchResponse, WretchResponseChain, WretchError as WretchErrorType } from \"./types.js\"\nimport { FETCH_ERROR } from \"./constants.js\"\n\n/**\n * This class inheriting from Error is thrown when the fetch response is not \"ok\".\n * It extends Error and adds status, text and body fields.\n */\nexport class WretchError extends Error implements WretchErrorType {\n  status: number\n  response: WretchResponse\n  url: string\n  text?: string\n  json?: any\n}\n\nexport const resolver = <T, Chain, R>(wretch: T & Wretch<T, Chain, R>) => {\n  const sharedState = Object.create(null)\n\n  wretch = wretch._addons.reduce((w, addon) =>\n    addon.beforeRequest &&\n    addon.beforeRequest(w, wretch._options, sharedState)\n    || w,\n    wretch)\n\n  const {\n    _url: url,\n    _options: opts,\n    _config: config,\n    _catchers: _catchers,\n    _resolvers: resolvers,\n    _middlewares: middlewares,\n    _addons: addons\n  } = wretch\n\n  const catchers = new Map(_catchers)\n  const finalOptions = mix(config.options, opts)\n\n  // The generated fetch request\n  let finalUrl = url\n  const _fetchReq = middlewareHelper(middlewares)((url, options) => {\n    finalUrl = url\n    return config.polyfill(\"fetch\")(url, options)\n  })(url, finalOptions)\n  // Throws on an http error\n  const referenceError = new Error()\n  const throwingPromise: Promise<void | WretchResponse> = _fetchReq\n    .catch(error => {\n      throw { __wrap: error }\n    })\n    .then(response => {\n      if (!response.ok) {\n        const err = new WretchError()\n        // Enhance the error object\n        err[\"cause\"] = referenceError\n        err.stack = err.stack + \"\\nCAUSE: \" + referenceError.stack\n        err.response = response\n        err.url = finalUrl\n        if (response.type === \"opaque\") {\n          throw err\n        }\n        return response.text().then((body: string) => {\n          err.message = body\n          if (config.errorType === \"json\" || response.headers.get(\"Content-Type\")?.split(\";\")[0] === \"application/json\") {\n            try { err.json = JSON.parse(body) } catch (e) { /* ignore */ }\n          }\n          err.text = body\n          err[\"status\"] = response.status\n          throw err\n        })\n      }\n      return response\n    })\n  // Wraps the Promise in order to dispatch the error to a matching catcher\n  const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n    return promise.catch(err => {\n      const error = err.__wrap || err\n\n      const catcher =\n        (error.status && catchers.get(error.status)) ||\n        catchers.get(error.name) || (\n          err.__wrap && catchers.has(FETCH_ERROR) && catchers.get(FETCH_ERROR)\n        )\n\n      if (catcher)\n        return catcher(error, wretch)\n\n      throw error\n    })\n  }\n  // Enforces the proper promise type when a body parsing method is called.\n  type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Awaited<Result>>\n  const bodyParser: BodyParser = funName => cb => funName ?\n    // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n    catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n    // No body parsing method - return the response\n    catchersWrapper(throwingPromise.then(_ => cb ? cb(_ as any) : _))\n\n  const responseChain: WretchResponseChain<T, Chain, R> = {\n    _wretchReq: wretch,\n    _fetchReq,\n    _sharedState: sharedState,\n    res: bodyParser<WretchResponse>(null),\n    json: bodyParser<any>(\"json\"),\n    blob: bodyParser<Blob>(\"blob\"),\n    formData: bodyParser<FormData>(\"formData\"),\n    arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n    text: bodyParser<string>(\"text\"),\n    error(errorId, cb) {\n      catchers.set(errorId, cb)\n      return this\n    },\n    badRequest(cb) { return this.error(400, cb) },\n    unauthorized(cb) { return this.error(401, cb) },\n    forbidden(cb) { return this.error(403, cb) },\n    notFound(cb) { return this.error(404, cb) },\n    timeout(cb) { return this.error(408, cb) },\n    internalError(cb) { return this.error(500, cb) },\n    fetchError(cb) { return this.error(FETCH_ERROR, cb) },\n  }\n\n  const enhancedResponseChain: R extends undefined ? Chain & WretchResponseChain<T, Chain, undefined> : R = addons.reduce((chain, addon) => ({\n    ...chain,\n    ...(addon.resolver as any)\n  }), responseChain)\n\n  return resolvers.reduce((chain, r) => r(chain, wretch), enhancedResponseChain)\n}\n","import type { ConfiguredMiddleware, FetchLike } from \"./types.js\"\n\n/**\n * @private @internal\n */\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n  return middlewares.reduceRight((acc, curr) => curr(acc), fetchFunction) || fetchFunction\n}\n","import { mix, extractContentType, isLikelyJsonMime } from \"./utils.js\"\nimport { JSON_MIME, CONTENT_TYPE_HEADER } from \"./constants.js\"\nimport { resolver } from \"./resolver.js\"\nimport config from \"./config.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport const core: Wretch = {\n  _url: \"\",\n  _options: {},\n  _config: config,\n  _catchers: new Map(),\n  _resolvers: [],\n  _deferred: [],\n  _middlewares: [],\n  _addons: [],\n  addon(addon) {\n    return { ...this, _addons: [...this._addons, addon], ...addon.wretch }\n  },\n  errorType(errorType: string) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        errorType\n      }\n    }\n  },\n  polyfills(polyfills, replace = false) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        polyfills: replace ? polyfills : mix(this._config.polyfills, polyfills)\n      }\n    }\n  },\n  url(_url, replace = false) {\n    if (replace)\n      return { ...this, _url }\n    const split = this._url.split(\"?\")\n    return {\n      ...this,\n      _url: split.length > 1 ?\n        split[0] + _url + \"?\" + split[1] :\n        this._url + _url\n    }\n  },\n  options(options, replace = false) {\n    return { ...this, _options: replace ? options : mix(this._options, options) }\n  },\n  headers(headerValues) {\n    return { ...this, _options: mix(this._options, { headers: headerValues || {} }) }\n  },\n  accept(headerValue) {\n    return this.headers({ Accept: headerValue })\n  },\n  content(headerValue) {\n    return this.headers({ [CONTENT_TYPE_HEADER]: headerValue })\n  },\n  auth(headerValue) {\n    return this.headers({ Authorization: headerValue })\n  },\n  catcher(errorId, catcher) {\n    const newMap = new Map(this._catchers)\n    newMap.set(errorId, catcher)\n    return { ...this, _catchers: newMap }\n  },\n  resolve<R = unknown>(resolver, clear: boolean = false) {\n    return { ...this, _resolvers: clear ? [resolver] : [...this._resolvers, resolver] }\n  },\n  defer(callback, clear: boolean = false) {\n    return {\n      ...this,\n      _deferred: clear ? [callback] : [...this._deferred, callback]\n    }\n  },\n  middlewares(middlewares, clear = false) {\n    return {\n      ...this,\n      _middlewares: clear ? middlewares : [...this._middlewares, ...middlewares]\n    }\n  },\n  fetch(method: string = this._options.method, url = \"\", body = null) {\n    let base = this.url(url).options({ method })\n    // \"Jsonify\" the body if it is an object and if it is likely that the content type targets json.\n    const contentType = extractContentType(base._options.headers)\n    const jsonify = typeof body === \"object\" && (!base._options.headers || !contentType || isLikelyJsonMime(contentType))\n    base =\n      !body ? base :\n        jsonify ? base.json(body, contentType) :\n          base.body(body)\n    return resolver(\n      base\n        ._deferred\n        .reduce((acc: Wretch, curr) => curr(acc, acc._url, acc._options), base)\n    )\n  },\n  get(url = \"\") {\n    return this.fetch(\"GET\", url)\n  },\n  delete(url = \"\") {\n    return this.fetch(\"DELETE\", url)\n  },\n  put(body, url = \"\") {\n    return this.fetch(\"PUT\", url, body)\n  },\n  post(body, url = \"\") {\n    return this.fetch(\"POST\", url, body)\n  },\n  patch(body, url = \"\") {\n    return this.fetch(\"PATCH\", url, body)\n  },\n  head(url = \"\") {\n    return this.fetch(\"HEAD\", url)\n  },\n  opts(url = \"\") {\n    return this.fetch(\"OPTIONS\", url)\n  },\n  body(contents) {\n    return { ...this, _options: { ...this._options, body: contents } }\n  },\n  json(jsObject, contentType) {\n    const currentContentType = extractContentType(this._options.headers)\n    return this.content(\n      contentType ||\n      isLikelyJsonMime(currentContentType) && currentContentType ||\n      JSON_MIME\n    ).body(JSON.stringify(jsObject))\n  }\n}\n","import { setOptions, setErrorType, setPolyfills } from \"./config.js\"\nimport { core } from \"./core.js\"\nimport { WretchError } from \"./resolver.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport type {\n  Wretch,\n  Config,\n  ConfiguredMiddleware,\n  FetchLike,\n  Middleware,\n  WretchResponseChain,\n  WretchOptions,\n  WretchError,\n  WretchErrorCallback,\n  WretchResponse,\n  WretchDeferredCallback,\n  WretchAddon\n} from \"./types.js\"\n\n/**\n * Creates a new wretch instance with a base url and base\n * [fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch).\n *\n * ```ts\n * import wretch from \"wretch\"\n *\n * // Reusable instance\n * const w = wretch(\"https://domain.com\", { mode: \"cors\" })\n * ```\n *\n * @param _url The base url\n * @param _options The base fetch options\n * @returns A fresh wretch instance\n */\nfunction factory(_url = \"\", _options = {}): Wretch {\n  return { ...core, _url, _options }\n}\n\nfactory[\"default\"] = factory\n/** {@inheritDoc setOptions} */\nfactory.options = setOptions\n/** {@inheritDoc setErrorType} */\nfactory.errorType = setErrorType\n/** {@inheritDoc setPolyfills} */\nfactory.polyfills = setPolyfills\nfactory.WretchError = WretchError\n\nexport default factory\n"],"names":["FETCH_ERROR","Symbol","extractContentType","headers","_a","Object","entries","find","k","toLowerCase","test","value","one","two","mergeArrays","reduce","acc","key","newValue","Array","isArray","mix","config","options","errorType","polyfills","res","this","p","self","global","doThrow","Error","instance","args","resolver","wretch","sharedState","create","_addons","w","addon","beforeRequest","_options","_url","url","opts","_config","_catchers","_resolvers","resolvers","_middlewares","middlewares","addons","Map","finalOptions","finalUrl","reduceRight","curr","fetchFunction","polyfill","referenceError","error","__wrap","response","ok","err","WretchError","type","text","then","body","message","parse","e","status","bodyParser","funName","cb","_","throwingPromise","catcher","catchers","get","name","has","_wretchReq","_fetchReq","_sharedState","json","blob","formData","arrayBuffer","errorId","set","badRequest","unauthorized","forbidden","notFound","timeout","internalError","fetchError","enhancedResponseChain","chain","responseChain","r","core","_deferred","replace","split","length","headerValues","accept","headerValue","Accept","content","auth","Authorization","newMap","resolve","clear","defer","callback","method","base","contentType","jsonify","fetch","delete","put","post","patch","head","contents","currentContentType","isLikelyJsonMime","JSON","stringify","jsObject","factory"],"mappings":"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"}