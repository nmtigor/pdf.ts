var global, factory;
global = this,
  factory = function () {
    return () => ({
      beforeRequest(t, e, o) {
        const r = t._config.polyfill("AbortController", 0, 1);
        !e.signal && r && (e.signal = r.signal);
        const l = {
          ref: null,
          clear() {
            l.ref && (clearTimeout(l.ref), l.ref = null);
          },
        };
        return o.abort = { timeout: l, fetchController: r }, t;
      },
      wretch: {
        signal(t) {
          return { ...this, _options: { ...this._options, signal: t.signal } };
        },
      },
      resolver: {
        setTimeout(t, e = this._sharedState.abort.fetchController) {
          const { timeout: o } = this._sharedState.abort;
          return o.clear(), o.ref = setTimeout(() => e.abort(), t), this;
        },
        controller() {
          return [this._sharedState.abort.fetchController, this];
        },
        onAbort(t) {
          return this.error("AbortError", t);
        },
      },
    });
  },
  "object" == typeof exports && "undefined" != typeof module
    ? module.exports = factory()
    : "function" == typeof define && define.amd
    ? define(factory)
    : (global = "undefined" != typeof globalThis ? globalThis : global || self)
      .wretchAbortAddon = factory();
//# sourceMappingURL=abort.min.js.map
