var global, factory;
global = this,
  factory = function () {
    return () => {
      const e = new Map();
      let r = null;
      const t = (t, o, s, n) => {
        if (!t.getEntriesByName) return 0;
        const c = t.getEntriesByName(o);
        return c && c.length > 0
          ? (s(c.reverse()[0]),
            n.clearMeasures && n.clearMeasures(o),
            e.delete(o),
            e.size < 1 &&
            (r.disconnect(),
              n.clearResourceTimings && n.clearResourceTimings()),
            1)
          : 0;
      };
      return {
        resolver: {
          perfs(o) {
            return this._fetchReq.then((s) =>
              ((o, s, n) => {
                if (!o || !s) return;
                const c = n.polyfill("performance", 0);
                ((o, s) => (!r && o && s && (r = new s((r) => {
                  e.forEach((e, s) => {
                    t(r, s, e, o);
                  });
                }),
                  o.clearResourceTimings && o.clearResourceTimings()),
                  r))(c, n.polyfill("PerformanceObserver", 0)) &&
                  (t(c, o, s, c) ||
                    (e.size < 1 &&
                      r.observe({ entryTypes: ["resource", "measure"] }),
                      e.set(o, s)));
              })(this._wretchReq._url, o, this._wretchReq._config)
            ).catch(
              () => {},
            ),
              this;
          },
        },
      };
    };
  },
  "object" == typeof exports && "undefined" != typeof module
    ? module.exports = factory()
    : "function" == typeof define && define.amd
    ? define(factory)
    : (global = "undefined" != typeof globalThis ? globalThis : global || self)
      .wretchPerfsAddon = factory();
//# sourceMappingURL=perfs.min.js.map
