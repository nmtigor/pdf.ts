{"version":3,"file":"progress.min.js","sources":["../../../src/addons/progress.ts"],"sourcesContent":["import type { ConfiguredMiddleware, WretchAddon, WretchResponseChain } from \"../types.js\"\n\nexport interface ProgressResolver {\n  /**\n   * Provides a way to register a callback to be invoked one or multiple times during the download.\n   * The callback receives the current progress as two arguments, the number of bytes loaded and the total number of bytes to load.\n   *\n   * _Under the hood: this method adds a middleware to the chain that will intercept the response and replace the body with a new one that will emit the progress event._\n   *\n   * ```js\n   * import ProgressAddon from \"wretch/addons/progress\"\n   *\n   * wretch(\"some_url\")\n   *   // Register the addon\n   *   .addon(ProgressAddon())\n   *   .get()\n   *   // Log the progress as a percentage of completion\n   *   .progress((loaded, total) => console.log(`${(loaded / total * 100).toFixed(0)}%`))\n   * ```\n   *\n   * @param onProgress - A callback that will be called one or multiple times with the number of bytes loaded and the total number of bytes to load.\n   */\n  progress: <T, C extends ProgressResolver, R>(\n    this: C & WretchResponseChain<T, C, R>,\n    onProgress: (loaded: number, total: number) => void\n  ) => this\n}\n\n/**\n * Adds the ability to monitor progress when downloading a response.\n *\n * _Compatible with all platforms implementing the [TransformStream WebAPI](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream#browser_compatibility)._\n *\n * ```js\n * import ProgressAddon from \"wretch/addons/progress\"\n *\n * wretch(\"some_url\")\n *   // Register the addon\n *   .addon(ProgressAddon())\n *   .get()\n *   // Log the progress as a percentage of completion\n *   .progress((loaded, total) => console.log(`${(loaded / total * 100).toFixed(0)}%`))\n * ```\n */\nconst progress: () => WretchAddon<unknown, ProgressResolver> = () => {\n  function transformMiddleware(state: Record<any, any>) : ConfiguredMiddleware {\n    return next => (url, opts) => {\n      let loaded = 0\n      let total = 0\n      return next(url, opts).then(response => {\n        try {\n          const contentLength = response.headers.get(\"content-length\")\n          total = contentLength ? +contentLength : null\n          const transform = new TransformStream({\n            transform(chunk, controller) {\n              loaded += chunk.length\n              if (total < loaded) {\n                total = loaded\n              }\n              if (state.progress) {\n                state.progress(loaded, total)\n              }\n              controller.enqueue(chunk)\n            }\n          })\n          return new Response(response.body.pipeThrough(transform), response)\n        } catch (e) {\n          return response\n        }\n      })\n    }\n  }\n\n  return {\n    beforeRequest(wretch, _, state) {\n      return wretch.middlewares([transformMiddleware(state)])\n    },\n    resolver: {\n      progress(onProgress: (loaded: number, total: number) => void) {\n        this._sharedState.progress = onProgress\n        return this\n      }\n    },\n  }\n}\n\nexport default progress\n"],"names":["next","url","opts","then","response","contentLength","headers","get","total","transform","TransformStream","chunk","controller","loaded","length","state","progress","enqueue","body","pipeThrough","e","beforeRequest","wretch","_","middlewares","transformMiddleware","resolver","onProgress","this","_sharedState"],"mappings":"yDA2CG,OAAAA,EAAAC,EAAAC,GAAAC,MAAAC,IACG,IACK,MAAAC,EAA2CD,EAAAE,QAAAC,IAAA,kBACvCC,EAAKH,GAAaA,EAAA,KACvB,MAAMI,EAAI,IAAAC,gBAAA,CACVD,UAASE,EAAAC,GACDC,GAAUF,EAAMG,OACtBN,EAAAK,IACiBL,EAAAK,GAEbE,EAAAC,UACKD,EAACC,WAAiBR,KAErBS,QAAQN,EACV,wBAEEP,EAAMc,KAAUC,YAAAV,GAAAL,EAIrB,CAFE,MAAAgB,GACD,OAAAhB,CACD,IACF,CAEF,CAAC,MAAA,CACAiB,cAAA,CAAAC,EAAAC,MACDD,EAAAE,YAAA,CAAAC,EAAAV,KAELW,SAAC,CACFV,SAAAW,UAEMC,KAAAC,aAAAb,SAAAW,SAIL,SAGIX"}