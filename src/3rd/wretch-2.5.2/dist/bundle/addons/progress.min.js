var global, factory;
global = this,
  factory = function () {
    return () => {
      function e(e) {
        return (r) => (t, o) => {
          let n = 0, s = 0;
          return r(t, o).then((r) => {
            try {
              const t = r.headers.get("content-length");
              s = t ? +t : null;
              const o = new TransformStream({
                transform(r, t) {
                  n += r.length,
                    s < n && (s = n),
                    e.progress && e.progress(n, s),
                    t.enqueue(r);
                },
              });
              return new Response(r.body.pipeThrough(o), r);
            } catch (e) {
              return r;
            }
          });
        };
      }
      return {
        beforeRequest: (r, t, o) => r.middlewares([e(o)]),
        resolver: {
          progress(e) {
            return this._sharedState.progress = e, this;
          },
        },
      };
    };
  },
  "object" == typeof exports && "undefined" != typeof module
    ? module.exports = factory()
    : "function" == typeof define && define.amd
    ? define(factory)
    : (global = "undefined" != typeof globalThis ? globalThis : global || self)
      .wretchProgressAddon = factory();
//# sourceMappingURL=progress.min.js.map
