!function (e, t) {
  "object" == typeof exports && "undefined" != typeof module
    ? module.exports = t()
    : "function" == typeof define && define.amd
    ? define(t)
    : (e = "undefined" != typeof globalThis ? globalThis : e || self).wretch =
      t();
}(this, function () {
  const e = "Content-Type", t = Symbol();
  function r(t = {}) {
    var r;
    return null ===
          (r = Object.entries(t).find(([t]) =>
            t.toLowerCase() === e.toLowerCase()
          )) || void 0 === r
      ? void 0
      : r[1];
  }
  function o(e) {
    return /^application\/.*json.*/.test(e);
  }
  const n = function (e, t, r = 0) {
      return Object.entries(t).reduce((t, [o, s]) => {
        const i = e[o];
        return Array.isArray(i) && Array.isArray(s)
          ? t[o] = r ? [...i, ...s] : s
          : t[o] = "object" == typeof i && "object" == typeof s
            ? n(i, s, r)
            : s,
          t;
      }, { ...e });
    },
    s = {
      options: {},
      errorType: "text",
      polyfills: {},
      polyfill(e, t = 1, r = 0, ...o) {
        const n = this.polyfills[e] ||
          ("undefined" != typeof self ? self[e] : null) ||
          ("undefined" != typeof global ? global[e] : null);
        if (t && !n) throw new Error(e + " is not defined");
        return r && n ? new n(...o) : n;
      },
    };
  class i extends Error {}
  const c = (e) => {
      const r = Object.create(null);
      e = e._addons.reduce(
        (t, o) => o.beforeRequest && o.beforeRequest(t, e._options, r) || t,
        e,
      );
      const {
          _url: o,
          _options: s,
          _config: c,
          _catchers: l,
          _resolvers: a,
          _middlewares: u,
          _addons: h,
        } = e,
        f = new Map(l),
        d = n(c.options, s);
      let p = o;
      const _ = ((e) => (t) => e.reduceRight((e, t) => t(e), t) || t)(u)(
          (e, t) => (p = e, c.polyfill("fetch")(e, t)),
        )(o, d),
        y = new Error(),
        g = _.catch((e) => {
          throw { __wrap: e };
        }).then((e) => {
          if (!e.ok) {
            const t = new i();
            if (
              t.cause = y,
                t.stack = t.stack + "\nCAUSE: " + y.stack,
                t.response = e,
                t.url = p,
                "opaque" === e.type
            ) throw t;
            return e.text().then((r) => {
              var o;
              if (
                t.message = r,
                  "json" === c.errorType ||
                  "application/json" ===
                    (null === (o = e.headers.get("Content-Type")) ||
                        void 0 === o
                      ? void 0
                      : o.split(";")[0])
              ) {
                try {
                  t.json = JSON.parse(r);
                } catch (e) {}
              }
              throw t.text = r, t.status = e.status, t;
            });
          }
          return e;
        }),
        b = (r) => (o) =>
          (r
            ? g.then((e) => e && e[r]()).then((e) => o ? o(e) : e)
            : g.then((e) => o ? o(e) : e)).catch((r) => {
              const o = r.__wrap || r,
                n = o.status && f.get(o.status) || f.get(o.name) ||
                  r.__wrap && f.has(t) && f.get(t);
              if (n) return n(o, e);
              throw o;
            }),
        m = {
          _wretchReq: e,
          _fetchReq: _,
          _sharedState: r,
          res: b(null),
          json: b("json"),
          blob: b("blob"),
          formData: b("formData"),
          arrayBuffer: b("arrayBuffer"),
          text: b("text"),
          error(e, t) {
            return f.set(e, t), this;
          },
          badRequest(e) {
            return this.error(400, e);
          },
          unauthorized(e) {
            return this.error(401, e);
          },
          forbidden(e) {
            return this.error(403, e);
          },
          notFound(e) {
            return this.error(404, e);
          },
          timeout(e) {
            return this.error(408, e);
          },
          internalError(e) {
            return this.error(500, e);
          },
          fetchError(e) {
            return this.error(t, e);
          },
        },
        w = h.reduce((e, t) => ({ ...e, ...t.resolver }), m);
      return a.reduce((t, r) => r(t, e), w);
    },
    l = {
      _url: "",
      _options: {},
      _config: s,
      _catchers: new Map(),
      _resolvers: [],
      _deferred: [],
      _middlewares: [],
      _addons: [],
      addon(e) {
        return { ...this, _addons: [...this._addons, e], ...e.wretch };
      },
      errorType(e) {
        return { ...this, _config: { ...this._config, errorType: e } };
      },
      polyfills(e, t = 0) {
        return {
          ...this,
          _config: {
            ...this._config,
            polyfills: t ? e : n(this._config.polyfills, e),
          },
        };
      },
      url(e, t = 0) {
        if (t) return { ...this, _url: e };
        const r = this._url.split("?");
        return {
          ...this,
          _url: r.length > 1 ? r[0] + e + "?" + r[1] : this._url + e,
        };
      },
      options(e, t = 0) {
        return { ...this, _options: t ? e : n(this._options, e) };
      },
      headers(e) {
        return { ...this, _options: n(this._options, { headers: e || {} }) };
      },
      accept(e) {
        return this.headers({ Accept: e });
      },
      content(t) {
        return this.headers({ [e]: t });
      },
      auth(e) {
        return this.headers({ Authorization: e });
      },
      catcher(e, t) {
        const r = new Map(this._catchers);
        return r.set(e, t), { ...this, _catchers: r };
      },
      resolve(e, t = 0) {
        return { ...this, _resolvers: t ? [e] : [...this._resolvers, e] };
      },
      defer(e, t = 0) {
        return { ...this, _deferred: t ? [e] : [...this._deferred, e] };
      },
      middlewares(e, t = 0) {
        return { ...this, _middlewares: t ? e : [...this._middlewares, ...e] };
      },
      fetch(e = this._options.method, t = "", n = null) {
        let s = this.url(t).options({ method: e });
        const i = r(s._options.headers),
          l = "object" == typeof n && (!s._options.headers || !i || o(i));
        return s = n ? l ? s.json(n, i) : s.body(n) : s,
          c(s._deferred.reduce((e, t) => t(e, e._url, e._options), s));
      },
      get(e = "") {
        return this.fetch("GET", e);
      },
      delete(e = "") {
        return this.fetch("DELETE", e);
      },
      put(e, t = "") {
        return this.fetch("PUT", t, e);
      },
      post(e, t = "") {
        return this.fetch("POST", t, e);
      },
      patch(e, t = "") {
        return this.fetch("PATCH", t, e);
      },
      head(e = "") {
        return this.fetch("HEAD", e);
      },
      opts(e = "") {
        return this.fetch("OPTIONS", e);
      },
      body(e) {
        return { ...this, _options: { ...this._options, body: e } };
      },
      json(e, t) {
        const n = r(this._options.headers);
        return this.content(t || o(n) && n || "application/json").body(
          JSON.stringify(e),
        );
      },
    },
    a = () => ({
      beforeRequest(e, t, r) {
        const o = e._config.polyfill("AbortController", 0, 1);
        !t.signal && o && (t.signal = o.signal);
        const n = {
          ref: null,
          clear() {
            n.ref && (clearTimeout(n.ref), n.ref = null);
          },
        };
        return r.abort = { timeout: n, fetchController: o }, e;
      },
      wretch: {
        signal(e) {
          return { ...this, _options: { ...this._options, signal: e.signal } };
        },
      },
      resolver: {
        setTimeout(e, t = this._sharedState.abort.fetchController) {
          const { timeout: r } = this._sharedState.abort;
          return r.clear(), r.ref = setTimeout(() => t.abort(), e), this;
        },
        controller() {
          return [this._sharedState.abort.fetchController, this];
        },
        onAbort(e) {
          return this.error("AbortError", e);
        },
      },
    });
  function u(e, t = 0, r, o = r.polyfill("FormData", 1, 1), n = []) {
    return Object.entries(e).forEach(([e, s]) => {
      let i = n.reduce((e, t) => e ? `${e}[${t}]` : t, null);
      if (i = i ? `${i}[${e}]` : e, s instanceof Array) {
        for (const e of s) o.append(i, e);
      } else {!t || "object" != typeof s || t instanceof Array && t.includes(e)
          ? o.append(i, s)
          : null !== s && u(s, t, r, o, [...n, e]);}
    }),
      o;
  }
  const h = {
    wretch: {
      formData(e, t = 0) {
        return this.body(u(e, t, this._config));
      },
    },
  };
  function f(e, t) {
    return encodeURIComponent(e) + "=" +
      encodeURIComponent("object" == typeof t ? JSON.stringify(t) : "" + t);
  }
  const d = {
      wretch: {
        formUrl(e) {
          return this.body(
            "string" == typeof e ? e : (t = e,
              Object.keys(t).map((e) => {
                const r = t[e];
                return r instanceof Array
                  ? r.map((t) => f(e, t)).join("&")
                  : f(e, r);
              }).join("&")),
          ).content("application/x-www-form-urlencoded");
          var t;
        },
      },
    },
    p = () => {
      const e = new Map();
      let t = null;
      const r = (r, o, n, s) => {
        if (!r.getEntriesByName) return 0;
        const i = r.getEntriesByName(o);
        return i && i.length > 0
          ? (n(i.reverse()[0]),
            s.clearMeasures && s.clearMeasures(o),
            e.delete(o),
            e.size < 1 &&
            (t.disconnect(),
              s.clearResourceTimings && s.clearResourceTimings()),
            1)
          : 0;
      };
      return {
        resolver: {
          perfs(o) {
            return this._fetchReq.then((n) =>
              ((o, n, s) => {
                if (!o || !n) return;
                const i = s.polyfill("performance", 0);
                ((o, n) => (!t && o && n && (t = new n((t) => {
                  e.forEach((e, n) => {
                    r(t, n, e, o);
                  });
                }),
                  o.clearResourceTimings && o.clearResourceTimings()),
                  t))(i, s.polyfill("PerformanceObserver", 0)) &&
                  (r(i, o, n, i) ||
                    (e.size < 1 &&
                      t.observe({ entryTypes: ["resource", "measure"] }),
                      e.set(o, n)));
              })(this._wretchReq._url, o, this._wretchReq._config)
            ).catch(
              () => {},
            ),
              this;
          },
        },
      };
    };
  function _(e) {
    return void 0 !== e ? e : "";
  }
  const y = (e, t, r, o) => {
      let n;
      if ("string" == typeof t) n = t;
      else {
        const e = o.polyfill("URLSearchParams", 1, 1);
        for (const r in t) {
          const o = t[r];
          if (t[r] instanceof Array) for (const t of o) e.append(r, _(t));
          else e.append(r, _(o));
        }
        n = e.toString();
      }
      const s = e.split("?");
      return n
        ? r || s.length < 2 ? s[0] + "?" + n : e + "&" + n
        : r
        ? s[0]
        : e;
    },
    g = {
      wretch: {
        query(e, t = 0) {
          return { ...this, _url: y(this._url, e, t, this._config) };
        },
      },
    },
    b = () => {
      function e(e) {
        return (t) => (r, o) => {
          let n = 0, s = 0;
          return t(r, o).then((t) => {
            try {
              const r = t.headers.get("content-length");
              s = r ? +r : null;
              const o = new TransformStream({
                transform(t, r) {
                  n += t.length,
                    s < n && (s = n),
                    e.progress && e.progress(n, s),
                    r.enqueue(t);
                },
              });
              return new Response(t.body.pipeThrough(o), t);
            } catch (e) {
              return t;
            }
          });
        };
      }
      return {
        beforeRequest: (t, r, o) => t.middlewares([e(o)]),
        resolver: {
          progress(e) {
            return this._sharedState.progress = e, this;
          },
        },
      };
    };
  function m(e = "", t = {}) {
    return { ...l, _url: e, _options: t }.addon(a()).addon(h).addon(d).addon(
      p(),
    ).addon(g).addon(b());
  }
  return m.default = m,
    m.options = function (e, t = 0) {
      s.options = t ? e : n(s.options, e);
    },
    m.errorType = function (e) {
      s.errorType = e;
    },
    m.polyfills = function (e, t = 0) {
      s.polyfills = t ? e : n(s.polyfills, e);
    },
    m.WretchError = i,
    m;
});
//# sourceMappingURL=wretch.all.min.js.map
